name: 'Maven Release'
description: 'Execute maven release plugin to bump up project version in pom file'
inputs:
  repository_user:
    description: 'github package repository user'
    required: true

  repository_token:
    description: 'github package repository personal access token'
    required: true

  prerelease_branches:
    description: 'version number is not bump up, but a build number will be appended'
    required: true
    default: 'develop'

  release_branches:
    description: 'version number is bumped up'
    required: true
    default: 'main'

  github_actor:
    description: "env.GITHUB_ACTOR"
    required: true

  github_token:
    description: "secrets.GITHUB_TOKEN"
    required: true

  release_goal:
    description: "maven goal, package or deploy"
    required: true
    default: "package"
  
  gac:
    description: "GOOGLE_APPLICATION_CREDENTIALS"
    required: false
    default: ""

  maven_test_skip:
    description: "set to true to skip maven test"
    required: false
    default: "true"

outputs:
  release_version:
    description: "Tagged Release Version"
    value: ${{ steps.get_release_version.outputs.release_version }}

runs:
  using: "composite"
  steps:
    # Check out your GitHub repo into the container executing these steps
    - name: "Cloning repo"
      uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'adopt'
        cache: maven

    - name: Cache Maven packages
      uses: actions/cache@v2
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Build with Maven
      run: |-
        echo GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
        mvn -q --batch-mode --update-snapshots package -Dmaven.test.skip=${MAVEN_TEST_SKIP}
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.repository_token }}
        GITHUB_ACTOR: ${{ inputs.repository_user }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.prerelease_branches.gac }}
        MAVEN_TEST_SKIP: ${{ inputs.maven_test_skip }}

    - name: "Config git submitter user and email"
      shell: bash
      run: |
        git config --global user.email "release-bot@telus.com"
        git config --global user.name "${{ github.actor }}"

    #
    # Create a prerelease build number if the ref_name matches prerelease_branches
    #
    - name: "Make the build number for prerelease"
      id: prepare_prerelease
      shell: bash
      run: |
        export BUILD_NUMBER=$(date +%Y%m%d%H%M%S)
        echo "build_number=${BUILD_NUMBER}" >> $GITHUB_OUTPUT
        for branch in $PRE_RELEASE_BRANCHES; do
          echo "checking branch $branch"
          if [[ ${{ github.ref_name }} =~ $branch || "${{ github.head_ref }}" =~ $branch || "${{ github.base_ref }}" =! $branch ]]; then
              echo "match=true" >> $GITHUB_OUTPUT
              break
          fi
        done
        echo BUILD_NUMBER=$BUILD_NUMBER
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.prerelease_branches.gac }}
        PRE_RELEASE_BRANCHES: ${{ inputs.prerelease_branches }}

    - name: "check if code is on release branch"
      id: check_release_branch
      shell: bash
      run: |
        for branch in $RELEASE_BRANCHES; do
          echo "checking branch $branch"
          if [[ ${{ github.ref_name }} =~ $branch ]]; then
              echo "match=true" >> $GITHUB_OUTPUT
              break
          fi
        done
      env:
        RELEASE_BRANCHES: ${{ inputs.release_branches }}

    #
    # Get version from pom.xml, -SNAPSHOT is stripped from the version
    #
    - name: "Get project version"
      id: get_release_version
      shell: bash
      run: |
        RELEASE_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout|cut -d '-' -f 1)
        if [ x${{ steps.prepare_prerelease.outputs.match }} == 'xtrue' ]; then
          RELEASE_VERSION="$RELEASE_VERSION-b${{ steps.prepare_prerelease.outputs.build_number }}"  
        fi
        echo "release_version=${RELEASE_VERSION}" >> $GITHUB_OUTPUT
        echo RELEASE_VERSION=$RELEASE_VERSION
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.prerelease_branches.gac }}

    #
    # Tag the prerelease version if this is a prerelease build
    #
    - name: tag preprelease
      if: steps.prepare_prerelease.outputs.match == 'true'
      uses: mathieudutour/github-tag-action@v6.0
      with:
        github_token: ${{ inputs.github_token  }}
        pre_release_branches: ${{ inputs.prerelease_branches }}
        custom_tag: ${{ steps.get_release_version.outputs.release_version }}

    #
    # tag with release version and bump up the version in pom file
    #
    - name: prepare release
      if: steps.check_release_branch.outputs.match == 'true'
      shell: bash
      run: |
        mvn --batch-mode \
          -DtagNameFormat=v@{project.version} \
          -Darguments=-Dmaven.test.skip=true \
          release:clean \
          release:prepare

        git checkout ${release_tag}
      env:
        release_tag: v${{ steps.get_release_version.outputs.release_version }}
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.prerelease_branches.gac }}

    - name: package
      shell: bash
      run: |-
        echo GOOGLE_APPLICATION_CREDENTIALS=${GOOGLE_APPLICATION_CREDENTIALS}
        mvn --batch-mode --update-snapshots ${{ inputs.release_goal }} -Dmaven.test.skip=true
      env:
        GOOGLE_APPLICATION_CREDENTIALS: ${{ inputs.prerelease_branches.gac }}